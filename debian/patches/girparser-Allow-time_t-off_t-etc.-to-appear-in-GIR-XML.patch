From: Simon McVittie <smcv@debian.org>
Date: Mon, 18 Mar 2024 10:58:41 +0000
Subject: girparser: Allow time_t, off_t, etc. to appear in GIR XML

g-ir-scanner currently maps these to lower-level types at scan time by
assuming that time_t is an alias for long, off_t is an alias for size_t
and so on. This is not always accurate: some ILP32 architectures have
64-bit time_t (for Y2038 compatibility) and 64-bit off_t (for large file
support).

One option for resolving this g-ir-scanner bug is to have it pass these
types through to the GIR XML, and teach g-ir-compiler and its replacement
gi-compile-repository to convert them to the corresponding concrete
type tag, as they already do for abstract types such as `long long` and
`size_t`.

This is a gobject-introspection equivalent of
https://gitlab.gnome.org/GNOME/glib/-/merge_requests/3967 and
https://gitlab.gnome.org/GNOME/glib/-/merge_requests/3972, which in
turn are based on part of GNOME/gobject-introspection!451 by Shuyu Liu.

Helps: https://gitlab.gnome.org/GNOME/gobject-introspection/-/issues/494
Co-authored-by: Shuyu Liu <liushuyu011@gmail.com>
Applied-upstream: 1.80.1, commit:a5a107b17fb5d147b3bc19194852d53f5bce6c97
---
 girepository/girparser.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/girepository/girparser.c b/girepository/girparser.c
index 80fc270..e01142a 100644
--- a/girepository/girparser.c
+++ b/girepository/girparser.c
@@ -25,6 +25,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
+#include <sys/types.h>  /* For off_t on both Unix and Windows */
+#include <time.h>       /* For time_t */
 
 #include <glib.h>
 #include "girparser.h"
@@ -32,6 +34,10 @@
 #include "girnode.h"
 #include "gitypelib-internal.h"
 
+#ifdef G_OS_UNIX
+#include <sys/socket.h> /* For socklen_t */
+#endif
+
 /* This is a "major" version in the sense that it's only bumped
  * for incompatible changes.
  */
@@ -436,6 +442,16 @@ typedef struct {
   guint is_signed : 1;
 } IntegerAliasInfo;
 
+/*
+ * signedness:
+ * @T: a numeric type
+ *
+ * Returns: 1 if @T is signed, 0 if it is unsigned
+ */
+#define signedness(T) (((T) -1) <= 0)
+G_STATIC_ASSERT (signedness (int) == 1);
+G_STATIC_ASSERT (signedness (unsigned int) == 0);
+
 static IntegerAliasInfo integer_aliases[] = {
   { "gchar",    sizeof (gchar),   1 },
   { "guchar",   sizeof (guchar),  0 },
@@ -449,6 +465,17 @@ static IntegerAliasInfo integer_aliases[] = {
   { "gsize",    sizeof (gsize),   0 },
   { "gintptr",  sizeof (gintptr),      1 },
   { "guintptr", sizeof (guintptr),     0 },
+#define INTEGER_ALIAS(T) { #T, sizeof (T), signedness (T) }
+  INTEGER_ALIAS (off_t),
+  INTEGER_ALIAS (time_t),
+#ifdef G_OS_UNIX
+  INTEGER_ALIAS (dev_t),
+  INTEGER_ALIAS (gid_t),
+  INTEGER_ALIAS (pid_t),
+  INTEGER_ALIAS (socklen_t),
+  INTEGER_ALIAS (uid_t),
+#endif
+#undef INTEGER_ALIAS
 };
 
 typedef struct {
